{"version":3,"sources":["webpack://BlockFractal/./src/block-fractal.ts","webpack://BlockFractal/./src/geom/direction-flags.ts","webpack://BlockFractal/./src/geom/direction.ts","webpack://BlockFractal/./src/geom/index.ts","webpack://BlockFractal/./src/geom/mask-rect.ts","webpack://BlockFractal/./src/geom/mask.ts","webpack://BlockFractal/./src/geom/offset.ts","webpack://BlockFractal/./src/geom/path.ts","webpack://BlockFractal/./src/geom/raster-mask.ts","webpack://BlockFractal/./src/geom/rectangle.ts","webpack://BlockFractal/./src/geom/size.ts","webpack://BlockFractal/./src/index.ts","webpack://BlockFractal/webpack/bootstrap","webpack://BlockFractal/webpack/startup"],"names":[],"mappings":";;;;;;;;;;;;;;AAAA,oEAA+B;AAS/B,SAAS,eAAe,CAAC,MAAqB,EAAE,IAAiB;IAC7D,OAAO,MAAM,CAAC,MAAM,GAAG,CAAC,IAAI,MAAM,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;AACvE,CAAC;AAED,SAAS,QAAQ,CAAC,MAAqB,EAAE,IAAmB,EAAE,IAAiB;IAC3E,IAAI,eAAe,CAAC,MAAM,EAAE,IAAI,CAAC,EAAE;QAC/B,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC;KAC3D;SAAM;QACH,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAClB,IAAI,CAAC,GAAG,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;KACxB;AACL,CAAC;AAED,SAAS,cAAc,CAAC,MAAqB,EAAE,MAAoB,EAAE,SAAiB,EAC9D,SAAwB,EAAE,IAAmB,EAAE,CAAS,EACxD,EAAe,EAAE,EAAe;IACpD,IAAM,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC;IACnB,IAAM,IAAI,GAAG,EAAE,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC;4BAChB,CAAC;QACN,IAAM,GAAG,GAAG,IAAI,IAAI,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,CAAC;QACzC,4BAA4B;QAC5B,IAAI,eAAe,CAAC,SAAS,EAAE,GAAG,CAAC,EAAE;YACjC,+DAA+D;YAC/D,yBAAyB;YACzB,8DAA8D;YAC9D,IAAI,CAAC,GAAG,CAAC,SAAS,CAAC,MAAM,CAAC,SAAS,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC;;SAEjE;QACD,IAAI,CAAC,KAAK,MAAM,CAAC,MAAM,GAAG,CAAC,IAAI,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE;YAC1C,6DAA6D;YAC7D,wCAAwC;YACxC,IAAM,KAAK,GAAG,SAAS,CAAC,SAAS,CAAC,UAAC,KAAK,IAAK,YAAK,CAAC,MAAM,CAAC,GAAG,CAAC,EAAjB,CAAiB,CAAC,CAAC;YAChE,kDAAkD;YAClD,KAAoB,UAA0B,EAA1B,cAAS,CAAC,MAAM,CAAC,CAAC,EAAE,KAAK,CAAC,EAA1B,cAA0B,EAA1B,IAA0B,EAAE;gBAA3C,IAAM,KAAK;gBACZ,IAAI,CAAC,GAAG,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;aAC1B;YACD,QAAQ,CAAC,SAAS,EAAE,IAAI,EAAE,GAAG,CAAC,CAAC;;SAElC;QACD,IAAI,MAAM,EAAE,GAAG,SAAS,EAAE;YACtB,IAAM,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;YAC3C,IAAM,GAAG,GAAG,IAAI,IAAI,CAAC,MAAM,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC;YACtC,IAAM,GAAG,GAAG,IAAI,IAAI,CAAC,MAAM,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,CAAC;YAC7C,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE;gBAChB,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,IAAI,eAAe,CAAC,SAAS,EAAE,GAAG,CAAC,EAAE;oBACnD,QAAQ,CAAC,SAAS,EAAE,IAAI,EAAE,GAAG,CAAC,CAAC;oBAC/B,QAAQ,CAAC,SAAS,EAAE,IAAI,EAAE,GAAG,CAAC,CAAC;iBAClC;aACJ;SACJ;QACD,QAAQ,CAAC,SAAS,EAAE,IAAI,EAAE,GAAG,CAAC,CAAC;;IAhCnC,KAAK,IAAI,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,GAAG,EAAE,CAAC,CAAC,EAAE,CAAC,IAAI,IAAI;8BAAvC,CAAC;;;KAiCT;AACL,CAAC;AAED,SAAS,gBAAgB,CAAC,MAAqB,EAAE,MAAoB,EAAE,SAAiB,EAC9D,SAAwB,EAAE,IAAmB,EAAE,CAAS,EACxD,EAAe,EAAE,EAAe;IACtD,IAAM,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC;IACnB,IAAM,IAAI,GAAG,EAAE,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC;4BAChB,CAAC;QACN,IAAM,GAAG,GAAG,IAAI,IAAI,CAAC,MAAM,CAAC,CAAC,GAAG,IAAI,EAAE,CAAC,CAAC,CAAC;QACzC,4BAA4B;QAC5B,IAAI,eAAe,CAAC,SAAS,EAAE,GAAG,CAAC,EAAE;YACjC,+DAA+D;YAC/D,wCAAwC;YACxC,8DAA8D;YAC9D,IAAI,CAAC,GAAG,CAAC,SAAS,CAAC,MAAM,CAAC,SAAS,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC;;SAEjE;QACD,IAAI,CAAC,KAAK,MAAM,CAAC,MAAM,GAAG,CAAC,IAAI,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE;YAC1C,6DAA6D;YAC7D,wCAAwC;YACxC,IAAM,KAAK,GAAG,SAAS,CAAC,SAAS,CAAC,UAAC,KAAK,IAAK,YAAK,CAAC,MAAM,CAAC,GAAG,CAAC,EAAjB,CAAiB,CAAC,CAAC;YAChE,kDAAkD;YAClD,KAAoB,UAA0B,EAA1B,cAAS,CAAC,MAAM,CAAC,CAAC,EAAE,KAAK,CAAC,EAA1B,cAA0B,EAA1B,IAA0B,EAAE;gBAA3C,IAAM,KAAK;gBACZ,IAAI,CAAC,GAAG,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;aAC1B;YACD,QAAQ,CAAC,SAAS,EAAE,IAAI,EAAE,GAAG,CAAC,CAAC;;SAElC;QACD,IAAI,MAAM,EAAE,GAAG,SAAS,EAAE;YACtB,IAAM,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;YAC3C,IAAM,GAAG,GAAG,IAAI,IAAI,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC;YACtC,IAAM,GAAG,GAAG,IAAI,IAAI,CAAC,MAAM,CAAC,CAAC,GAAG,IAAI,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC;YAC7C,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE;gBAChB,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,IAAI,eAAe,CAAC,SAAS,EAAE,GAAG,CAAC,EAAE;oBACnD,QAAQ,CAAC,SAAS,EAAE,IAAI,EAAE,GAAG,CAAC,CAAC;oBAC/B,QAAQ,CAAC,SAAS,EAAE,IAAI,EAAE,GAAG,CAAC,CAAC;iBAClC;aACJ;SACJ;QACD,QAAQ,CAAC,SAAS,EAAE,IAAI,EAAE,GAAG,CAAC,CAAC;;IAhCnC,KAAK,IAAI,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,GAAG,EAAE,CAAC,CAAC,EAAE,CAAC,IAAI,IAAI;8BAAvC,CAAC;;;KAiCT;AACL,CAAC;AAED,SAAS,qBAAqB,CAAC,MAAoB,EAAE,MAAqB,EAC3C,MAA0B,EAAE,SAAiB;IACxE,IAAM,SAAS,GAAG,IAAI,KAAK,EAAe,CAAC;IAC3C,IAAM,SAAS,GAAG,IAAI,IAAI,CAAC,SAAS,CAChC,MAAM,CAAC,KAAK,GAAG,CAAC,GAAG,CAAC,EACpB,MAAM,CAAC,MAAM,GAAG,CAAC,GAAG,CAAC,EACrB,MAAM,CAAC,KAAK,GAAG,CAAC,GAAG,CAAC,EACpB,MAAM,CAAC,MAAM,GAAG,CAAC,GAAG,CAAC,CACxB,CAAC;IACF,wCAAwC;IACxC,IAAM,IAAI,GAAG,IAAI,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC;IAC1C,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC,EAAG,EAAE;QACzC,IAAM,EAAE,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;QACrB,IAAM,EAAE,GAAG,MAAM,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;QACzB,IAAI,CAAC,KAAK,CAAC,EAAE;YACT,QAAQ,CAAC,SAAS,EAAE,IAAI,EAAE,IAAI,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC,EAAE,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;SAClE;QACD,IAAI,EAAE,CAAC,CAAC,KAAK,EAAE,CAAC,CAAC,EAAE;YACf,cAAc,CAAC,MAAM,EAAE,MAAM,EAAE,SAAS,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC;SACzE;aAAM;YACH,gBAAgB,CAAC,MAAM,EAAE,MAAM,EAAE,SAAS,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC;SAC3E;KACJ;IACD,OAAO;QACH,MAAM,EAAE,SAAS;QACjB,MAAM,EAAE,SAAS;KACpB,CAAC;AACN,CAAC;AAED,SAAgB,gBAAgB,CAAC,KAAwB;;IAChD,UAAM,GAAsB,KAAK,OAA3B,EAAE,KAAK,GAAe,KAAK,MAApB,EAAE,SAAS,GAAI,KAAK,UAAT,CAAU;IACvC,IAAI,OAAO,MAAM,KAAK,WAAW,EAAE;QAC/B,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;KACxB;IACD,IAAI,OAAO,KAAK,KAAK,WAAW,EAAE;QAC9B,KAAK,GAAG,IAAI,IAAI,CAAC,IAAI,CAAC,EAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAC,EAAE;YAClC,IAAI,CAAC,SAAS,CAAC,IAAI;YACnB,IAAI,CAAC,SAAS,CAAC,IAAI;YACnB,IAAI,CAAC,SAAS,CAAC,KAAK;YACpB,IAAI,CAAC,SAAS,CAAC,KAAK;YACpB,IAAI,CAAC,SAAS,CAAC,IAAI;YACnB,IAAI,CAAC,SAAS,CAAC,IAAI;YACnB,IAAI,CAAC,SAAS,CAAC,KAAK;YACpB,IAAI,CAAC,SAAS,CAAC,KAAK;SACvB,CAAC,CAAC;KACN;IACD,IAAI,OAAO,SAAS,KAAK,WAAW,EAAE;QAClC,SAAS,GAAG,GAAG,CAAC;KACnB;IAED,IAAI,MAAM,GAAG,IAAI,KAAK,EAAe,CAAC;IACtC,IAAI,MAAM,GAAG,KAAK,CAAC,SAAS,EAAE,CAAC;IAC/B,KAAK,CAAC,UAAU,CAAC,UAAC,GAAG;QACjB,MAAM,CAAC,IAAI,CAAC,IAAI,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;IAC/C,CAAC,CAAC,CAAC;IAEH,KAAK,IAAI,IAAI,GAAG,CAAC,EAAE,IAAI,GAAG,KAAK,CAAC,UAAU,EAAE,IAAI,EAAG,EAAE;QACjD,yCAAyC;QACzC,CAAC,KAAmB,qBAAqB,CAAC,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,SAAS,CAAC,EAA1E,MAAM,cAAE,MAAM,aAA6D,CAAC;KACjF;IAED,IAAM,QAAQ,GAAG,IAAI,KAAK,EAAkB,CAAC;IAC7C,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC,EAAG,EAAE;QACzC,IAAM,QAAQ,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;QAC3B,IAAM,SAAS,GAAG,MAAM,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;QAChC,IAAI,SAAS,CAAC,CAAC,KAAK,QAAQ,CAAC,CAAC,GAAG,CAAC,EAAE;YAChC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;SACvC;aAAM,IAAI,SAAS,CAAC,CAAC,KAAK,QAAQ,CAAC,CAAC,GAAG,CAAC,EAAE;YACvC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;SACtC;aAAM,IAAI,SAAS,CAAC,CAAC,KAAK,QAAQ,CAAC,CAAC,GAAG,CAAC,EAAE;YACvC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;SACvC;aAAM,IAAI,SAAS,CAAC,CAAC,KAAK,QAAQ,CAAC,CAAC,GAAG,CAAC,EAAE;YACvC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;SACtC;KACJ;IAED,OAAO,IAAI,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,QAAQ,CAAC,CAAC;AAC9C,CAAC;AAhDD,4CAgDC;;;;;;;;;;;;;;ACnLD,4BAA4B;AAE5B,IAAY,cAOX;AAPD,WAAY,cAAc;IACtB,mDAAS;IACT,qDAAS;IACT,mDAAS;IACT,qDAAS;IACT,mDAAS;IACT,kDAAU;AACd,CAAC,EAPW,cAAc,GAAd,sBAAc,KAAd,sBAAc,QAOzB;AAED,SAAgB,sBAAsB,CAAC,KAAqB;IACxD,IAAI,GAAG,GAAG,GAAG,CAAC;IACd,IAAI,CAAC,KAAK,GAAG,cAAc,CAAC,KAAK,CAAC,KAAK,CAAC,EAAE;QACtC,GAAG,IAAI,GAAG,CAAC;KACd;IACD,IAAI,CAAC,KAAK,GAAG,cAAc,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE;QACrC,GAAG,IAAI,GAAG,CAAC;KACd;IACD,IAAI,CAAC,KAAK,GAAG,cAAc,CAAC,KAAK,CAAC,KAAK,CAAC,EAAE;QACtC,GAAG,IAAI,GAAG,CAAC;KACd;IACD,IAAI,CAAC,KAAK,GAAG,cAAc,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE;QACrC,GAAG,IAAI,GAAG,CAAC;KACd;IACD,OAAO,GAAG,GAAG,GAAG,CAAC;AACrB,CAAC;AAfD,wDAeC;AAED,aAAa;AAEb,SAAgB,2BAA2B,CAAC,GAAmB;IAC3D,OAAO,CAAC,CAAC,IAAI,GAAG,CAAmB,CAAC;AACxC,CAAC;AAFD,kEAEC;;;;;;;;;;;;AClCD,4BAA4B;;;AAE5B,IAAY,SAKX;AALD,WAAY,SAAS;IACjB,2CAAS;IACT,yCAAS;IACT,2CAAS;IACT,yCAAS;AACb,CAAC,EALW,SAAS,GAAT,iBAAS,KAAT,iBAAS,QAKpB;AAEY,kBAAU,GAAG;IACtB,SAAS,CAAC,KAAK;IACf,SAAS,CAAC,IAAI;IACd,SAAS,CAAC,KAAK;IACf,SAAS,CAAC,IAAI;CACjB,CAAC;AAEF,IAAM,cAAc,GAAG;IACnB,GAAG;IACH,GAAG;IACH,GAAG;IACH,GAAG;CACN,CAAC;AAEF,SAAgB,iBAAiB,CAAC,GAAc;IAC5C,OAAO,cAAc,CAAC,GAAG,CAAC,CAAC;AAC/B,CAAC;AAFD,8CAEC;AAED,SAAgB,iBAAiB,CAAC,GAAc;IAC5C,OAAO,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,GAAG,CAAC,CAAc,CAAC;AACxC,CAAC;AAFD,8CAEC;;;;;;;;;;;;;;;;;;;;;;;AC7BD,yFAA4B;AAC5B,qGAAkC;AAClC,mFAAyB;AACzB,+EAAuB;AACvB,yFAA4B;AAC5B,+EAAuB;AACvB,yFAA4B;AAC5B,6FAA8B;AAC9B,+EAAuB;;;;;;;;;;;;;;ACRvB,+DAA0B;AAE1B,IAAM,SAAS,GAAG,IAAI,IAAI,CAAC,MAAM,EAAE,CAAC;AAEpC;IAKI,kBAAY,IAAwB,EAAE,YAAoB,EAAE,YAAoB;QAA1C,mDAAoB;QAAE,mDAAoB;QAJ/D,eAAU,GAAG,IAAI,IAAI,CAAC,SAAS,EAAE,CAAC;QAK/C,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;QAC/B,IAAI,CAAC,KAAK,GAAG,IAAI,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE,YAAY,CAAC,CAAC;QAC/C,IAAI,CAAC,aAAa,GAAG,YAAY,CAAC;IACtC,CAAC;IAED,YAAY;IAEZ,2BAAQ,GAAR;QACI,OAAU,IAAI,CAAC,UAAU,CAAC,SAAS,SAAI,IAAI,CAAC,aAAa,UAAK,IAAI,CAAC,KAAO,CAAC;IAC/E,CAAC;IAED,sBAAI,2BAAK;aAAT;YACI,OAAO,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC;QACjC,CAAC;;;OAAA;IAED,sBAAI,4BAAM;aAAV;YACI,OAAO,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC;QAClC,CAAC;;;OAAA;IAED,sBAAI,2BAAK;aAAT;YACI,OAAO,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC;QACjC,CAAC;;;OAAA;IAED,sBAAI,4BAAM;aAAV;YACI,OAAO,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC;QAClC,CAAC;;;OAAA;IAED,wBAAK,GAAL,UAAM,GAAoB;QACtB,OAAO,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,SAAS,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,cAAc,CAAC,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC,CAAC,CAAC;IAC/F,CAAC;IAED,wBAAK,GAAL,UAAM,KAAa;QACf,OAAO,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;IACnC,CAAC;IAED,sBAAG,GAAH,UAAI,GAAoB;QACpB,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,cAAc,CAAC,GAAG,CAAC,EAAE;YACtC,OAAO,IAAI,CAAC,aAAa,CAAC;SAC7B;QACD,OAAO,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC;IACxD,CAAC;IAED,WAAW;IAEX,wBAAK,GAAL,UAAM,KAAa,EAAE,KAAc;QAC/B,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;QAC/B,OAAO,IAAI,CAAC;IAChB,CAAC;IAED,sBAAG,GAAH,UAAI,GAAoB,EAAE,KAAc;QACpC,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,GAAG,CAAC,EAAE,KAAK,CAAC,CAAC;QACpD,OAAO,IAAI,CAAC;IAChB,CAAC;IACL,eAAC;AAAD,CAAC;AA3DY,4BAAQ;;;;;;;;;;;;;;ACJrB,+DAA0B;AAE1B;IAGI,oCAAoC;IAEpC,cAAY,IAAmB,EAAE,YAAoB;QAApB,mDAAoB;QAJpC,UAAK,GAAG,IAAI,IAAI,CAAC,IAAI,EAAE,CAAC;QAKrC,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;QAC1B,IAAI,CAAC,KAAK,GAAG,IAAI,KAAK,CAAS,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,GAAG,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IACxG,CAAC;IAED,YAAY;IAEZ,uBAAQ,GAAR;QACI,IAAI,GAAG,GAAG,EAAE,CAAC;QACb,IAAM,GAAG,GAAG,IAAI,IAAI,CAAC,MAAM,EAAE,CAAC;QAC9B,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE,CAAC,EAAG,EAAE;YACzC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,KAAK,EAAE,CAAC,EAAG,EAAE;gBACxC,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;gBACd,GAAG,IAAI,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC;aAC9C;YACD,GAAG,IAAI,IAAI,CAAC;SACf;QACD,OAAO,GAAG,CAAC;IACf,CAAC;IAED,sBAAI,uBAAK;aAAT;YACI,OAAO,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC;QAC5B,CAAC;;;OAAA;IAED,sBAAI,wBAAM;aAAV;YACI,OAAO,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC;QAC7B,CAAC;;;OAAA;IAED,oBAAK,GAAL,UAAM,GAAoB;QACtB,OAAO,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;IACjC,CAAC;IAED,oBAAK,GAAL,UAAM,KAAa;QACf,4BAA4B;QAC5B,IAAM,UAAU,GAAG,KAAK,KAAK,CAAC,CAAC;QAC/B,IAAM,OAAO,GAAG,CAAC,IAAI,CAAC,KAAK,GAAG,EAAE,CAAC,CAAC;QAClC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,GAAG,OAAO,CAAC,KAAK,CAAC,CAAC;QAChD,2BAA2B;IAC/B,CAAC;IAED,kBAAG,GAAH,UAAI,GAAoB;QACpB,OAAO,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC;IACvC,CAAC;IAED,WAAW;IAEX,oBAAK,GAAL,UAAM,KAAa,EAAE,KAAc;QAC/B,4BAA4B;QAC5B,IAAM,UAAU,GAAG,KAAK,KAAK,CAAC,CAAC;QAC/B,IAAM,OAAO,GAAG,CAAC,IAAI,CAAC,KAAK,GAAG,EAAE,CAAC,CAAC;QAClC,IAAI,KAAK,EAAE;YACP,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,IAAI,OAAO,CAAC;SACrC;aAAM;YACH,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,IAAI,CAAC,OAAO,CAAC;SACtC;QACD,2BAA2B;QAC3B,OAAO,IAAI,CAAC;IAChB,CAAC;IAED,kBAAG,GAAH,UAAI,GAAoB,EAAE,KAAc;QACpC,OAAO,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,EAAE,KAAK,CAAC,CAAC;IAC9C,CAAC;IACL,WAAC;AAAD,CAAC;AAnEY,oBAAI;;;;;;;;;;;;;;ACAjB,IAAM,gBAAgB,GAAG,CAAG,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAE,CAAC;AAC1C,IAAM,gBAAgB,GAAG,CAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAG,CAAC,CAAE,CAAC;AAO1C;IAMI,gBAAY,CAAU,EAAE,CAAU;QAC9B,IAAI,OAAO,CAAC,KAAK,WAAW,EAAE;YAC1B,CAAC,GAAG,CAAC,CAAC;SACT;QACD,IAAI,OAAO,CAAC,KAAK,WAAW,EAAE;YAC1B,CAAC,GAAG,CAAC,CAAC;SACT;QACD,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC;QACX,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC;IACf,CAAC;IAED,YAAY;IAEZ,yBAAQ,GAAR;QACI,OAAO,MAAI,IAAI,CAAC,CAAC,SAAI,IAAI,CAAC,CAAC,MAAG,CAAC;IACnC,CAAC;IAED,uBAAM,GAAN,UAAO,KAAiB;QACpB,OAAO,IAAI,CAAC,CAAC,KAAK,KAAK,CAAC,CAAC,IAAI,IAAI,CAAC,CAAC,KAAK,KAAK,CAAC,CAAC,CAAC;IACpD,CAAC;IAGD,sBAAI,sCAAkB;QADtB,0DAA0D;aAC1D;YACI,OAAO,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;QACxD,CAAC;;;OAAA;IAGD,sBAAI,sCAAkB;QADtB,iEAAiE;aACjE;YACI,OAAO,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;QAC/C,CAAC;;;OAAA;IAED,WAAW;IAEX,oBAAG,GAAH,UAAI,CAAS,EAAE,CAAS;QACpB,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC;QACX,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC;QACX,OAAO,IAAI,CAAC;IAChB,CAAC;IAED,yBAAQ,GAAR,UAAS,KAAiB;QACtB,IAAI,CAAC,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC;QACjB,IAAI,CAAC,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC;QACjB,OAAO,IAAI,CAAC;IAChB,CAAC;IAED,iCAAgB,GAAhB,UAAiB,GAAmB;QAChC,IAAI,CAAC,CAAC,GAAG,gBAAgB,CAAC,GAAG,CAAC,CAAC;QAC/B,IAAI,CAAC,CAAC,GAAG,gBAAgB,CAAC,GAAG,CAAC,CAAC;QAC/B,OAAO,IAAI,CAAC;IAChB,CAAC;IAED,oBAAG,GAAH,UAAI,CAAS,EAAE,CAAS;QACpB,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC;QACZ,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC;QACZ,OAAO,IAAI,CAAC;IAChB,CAAC;IAED,wBAAO,GAAP,UAAQ,IAAmB;QACvB,IAAI,CAAC,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC;QACrB,IAAI,CAAC,CAAC,IAAI,IAAI,CAAC,MAAM,CAAC;QACtB,OAAO,IAAI,CAAC;IAChB,CAAC;IAED,0BAAS,GAAT,UAAU,GAAe;QACrB,IAAI,CAAC,CAAC,IAAI,GAAG,CAAC,CAAC,CAAC;QAChB,IAAI,CAAC,CAAC,IAAI,GAAG,CAAC,CAAC,CAAC;QAChB,OAAO,IAAI,CAAC;IAChB,CAAC;IAED,6BAAY,GAAZ,UAAa,GAAmB;QAC5B,IAAI,CAAC,CAAC,IAAI,gBAAgB,CAAC,GAAG,CAAC,CAAC;QAChC,IAAI,CAAC,CAAC,IAAI,gBAAgB,CAAC,GAAG,CAAC,CAAC;QAChC,OAAO,IAAI,CAAC;IAChB,CAAC;IAED,qCAAoB,GAApB,UAAqB,GAAmB;QACpC,IAAI,CAAC,CAAC,IAAI,gBAAgB,CAAC,GAAG,CAAC,CAAC;QAChC,IAAI,CAAC,CAAC,IAAI,gBAAgB,CAAC,GAAG,CAAC,CAAC;QAChC,OAAO,IAAI,CAAC;IAChB,CAAC;IAED,+BAAc,GAAd,UAAe,GAAe;QAC1B,IAAI,CAAC,CAAC,IAAI,GAAG,CAAC,CAAC,CAAC;QAChB,IAAI,CAAC,CAAC,IAAI,GAAG,CAAC,CAAC,CAAC;QAChB,OAAO,IAAI,CAAC;IAChB,CAAC;IAED,yBAAQ,GAAR,UAAS,MAAc;QACnB,IAAI,CAAC,CAAC,IAAI,MAAM,CAAC;QACjB,IAAI,CAAC,CAAC,IAAI,MAAM,CAAC;QACjB,OAAO,IAAI,CAAC;IAChB,CAAC;IAED,YAAY;IAEZ,0DAA0D;IAC1D,kCAAiB,GAAjB,UAAkB,KAAiB;QAC/B,OAAO,IAAI,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC,kBAAkB,CAAC;IACzD,CAAC;IAED,iEAAiE;IACjE,kCAAiB,GAAjB,UAAkB,KAAkB;QAChC,OAAO,IAAI,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC,kBAAkB,CAAC;IACzD,CAAC;IACL,aAAC;AAAD,CAAC;AA9GY,wBAAM;;;;;;;;;;;;;;ACVnB,+DAA0B;AAE1B,IAAM,SAAS,GAAG,IAAI,IAAI,CAAC,MAAM,EAAE,CAAC;AAEpC,SAAS,YAAY,CAAC,KAAe,EAAE,KAAa;IAChD,IAAI,GAAG,GAAG,CAAC,CAAC;IACZ,IAAI,IAAI,GAAG,KAAK,CAAC,MAAM,CAAC;IAExB,OAAO,GAAG,GAAG,IAAI,EAAE;QACf,sCAAsC;QACtC,IAAM,GAAG,GAAG,CAAC,GAAG,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC;QAC/B,IAAI,KAAK,CAAC,GAAG,CAAC,GAAG,KAAK,EAAE;YACpB,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC;SACjB;aAAM;YACH,IAAI,GAAG,GAAG,CAAC;SACd;KACJ;IAED,KAAK,CAAC,MAAM,CAAC,GAAG,EAAE,CAAC,EAAE,KAAK,CAAC,CAAC;AAChC,CAAC;AAED;IAMI,cAAY,KAAuB,EAAE,QAA2B;QAC5D,IAAI,CAAC,KAAK,GAAG,IAAI,IAAI,CAAC,MAAM,EAAE,CAAC;QAC/B,IAAI,OAAO,KAAK,KAAK,WAAW,EAAE;YAC9B,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;SAC9B;QACD,IAAI,OAAO,QAAQ,KAAK,WAAW,EAAE;YACjC,QAAQ,GAAG,IAAI,KAAK,EAAkB,CAAC;SAC1C;QACD,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;IAC7B,CAAC;IAED,uBAAQ,GAAR;QACI,OAAU,IAAI,CAAC,KAAK,CAAC,QAAQ,EAAE,MAAG;eAC5B,KAAG,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,UAAC,OAAO,IAAK,WAAI,CAAC,iBAAiB,CAAC,OAAO,CAAC,EAA/B,CAA+B,CAAC,CAAC,IAAI,CAAC,EAAE,CAAG,EAAC;IACxF,CAAC;IAED,0BAAW,GAAX;QACI,SAAS,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QAC/B,KAAsB,UAAa,EAAb,SAAI,CAAC,QAAQ,EAAb,cAAa,EAAb,IAAa,EAAE;YAAhC,IAAM,OAAO;YACd,SAAS,CAAC,YAAY,CAAC,OAAO,CAAC,CAAC;SACnC;QACD,OAAO,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC;IACxC,CAAC;IAED,yBAAU,GAAV,UAAW,QAAwC;QAC/C,IAAM,MAAM,GAAG,IAAI,IAAI,CAAC,MAAM,EAAE,CAAC;QACjC,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QAC5B,QAAQ,CAAC,MAAM,CAAC,CAAC;QACjB,KAAsB,UAAa,EAAb,SAAI,CAAC,QAAQ,EAAb,cAAa,EAAb,IAAa,EAAE;YAAhC,IAAM,OAAO;YACd,MAAM,CAAC,YAAY,CAAC,OAAO,CAAC,CAAC;YAC7B,QAAQ,CAAC,MAAM,CAAC,CAAC;SACpB;IACL,CAAC;IAED,wBAAS,GAAT;QACI,IAAI,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;QAC1B,IAAI,MAAM,GAAG,MAAM,CAAC;QACpB,IAAI,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;QACzB,IAAI,KAAK,GAAG,KAAK,CAAC;QAClB,SAAS,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QAC/B,KAAsB,UAAa,EAAb,SAAI,CAAC,QAAQ,EAAb,cAAa,EAAb,IAAa,EAAE;YAAhC,IAAM,OAAO;YACd,SAAS,CAAC,YAAY,CAAC,OAAO,CAAC,CAAC;YAChC,QAAQ,OAAO,EAAE;gBACjB,KAAK,IAAI,CAAC,SAAS,CAAC,KAAK;oBACrB,MAAM,GAAG,IAAI,CAAC,GAAG,CAAC,MAAM,EAAE,SAAS,CAAC,CAAC,CAAC,CAAC;oBACvC,MAAM;gBACV,KAAK,IAAI,CAAC,SAAS,CAAC,IAAI;oBACpB,KAAK,GAAG,IAAI,CAAC,GAAG,CAAC,KAAK,EAAE,SAAS,CAAC,CAAC,CAAC,CAAC;oBACrC,MAAM;gBACV,KAAK,IAAI,CAAC,SAAS,CAAC,KAAK;oBACrB,MAAM,GAAG,IAAI,CAAC,GAAG,CAAC,MAAM,EAAE,SAAS,CAAC,CAAC,CAAC,CAAC;oBACvC,MAAM;gBACV,KAAK,IAAI,CAAC,SAAS,CAAC,IAAI;oBACpB,KAAK,GAAG,IAAI,CAAC,GAAG,CAAC,KAAK,EAAE,SAAS,CAAC,CAAC,CAAC,CAAC;oBACrC,MAAM;aACT;SACJ;QACD,OAAO,IAAI,IAAI,CAAC,SAAS,CAAC,KAAK,EAAE,MAAM,EAAE,KAAK,GAAG,KAAK,GAAG,CAAC,EAAE,MAAM,GAAG,MAAM,GAAG,CAAC,CAAC,CAAC;IACrF,CAAC;IAED,sBAAO,GAAP;QACI,IAAI,KAAK,GAAG,CAAC,CAAC;QACd,SAAS,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QAC/B,KAAsB,UAAa,EAAb,SAAI,CAAC,QAAQ,EAAb,cAAa,EAAb,IAAa,EAAE;YAAhC,IAAM,OAAO;YACd,SAAS,CAAC,YAAY,CAAC,OAAO,CAAC,CAAC;YAChC,QAAQ,OAAO,EAAE;gBACjB,KAAK,IAAI,CAAC,SAAS,CAAC,KAAK;oBACrB,KAAK,IAAI,SAAS,CAAC,CAAC,CAAC;oBACrB,MAAM;gBACV,KAAK,IAAI,CAAC,SAAS,CAAC,KAAK;oBACrB,KAAK,IAAI,SAAS,CAAC,CAAC,CAAC;oBACrB,MAAM;aACT;SACJ;QACD,OAAO,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;IAC3B,CAAC;IAED,wBAAS,GAAT,UAAU,MAA2B;QACjC,IAAM,KAAK,GAAG,IAAI,KAAK,EAAY,CAAC;QACpC,IAAI,OAAO,MAAM,KAAK,WAAW,EAAE;YAC/B,MAAM,GAAG,IAAI,CAAC,SAAS,EAAE,CAAC;SAC7B;QACD,SAAS,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QACxB,UAAM,GAAI,MAAM,OAAV,CAAW;QACxB,IAAM,MAAM,GAAG,MAAM,GAAG,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC;QAC1C,KAAK,IAAI,CAAC,GAAG,MAAM,EAAE,CAAC,GAAG,MAAM,EAAE,CAAC,EAAG,EAAE;YACnC,KAAK,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;SAClB;QACD,SAAS,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QAC/B,KAAsB,UAAa,EAAb,SAAI,CAAC,QAAQ,EAAb,cAAa,EAAb,IAAa,EAAE;YAAhC,IAAM,OAAO;YACd,IAAI,OAAO,KAAK,IAAI,CAAC,SAAS,CAAC,KAAK,EAAE;gBAClC,YAAY,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC,GAAG,MAAM,CAAC,EAAE,SAAS,CAAC,CAAC,CAAC,CAAC;aAC1D;YACD,SAAS,CAAC,YAAY,CAAC,OAAO,CAAC,CAAC;YAChC,IAAI,OAAO,KAAK,IAAI,CAAC,SAAS,CAAC,KAAK,EAAE;gBAClC,YAAY,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC,GAAG,MAAM,CAAC,EAAE,SAAS,CAAC,CAAC,CAAC,CAAC;aAC1D;SACJ;QACD,OAAO,IAAI,IAAI,CAAC,UAAU,CAAC;YACvB,KAAK,EAAE,MAAM,CAAC,KAAK;YACnB,MAAM,EAAE,MAAM,CAAC,MAAM;YACrB,KAAK,EAAE,MAAM,CAAC,KAAK,GAAG,CAAC;YACvB,MAAM,EAAE,MAAM,CAAC,MAAM,GAAG,CAAC;SAC5B,EAAE,KAAK,CAAC,CAAC;IACd,CAAC;IACL,WAAC;AAAD,CAAC;AA/GY,oBAAI;;;;;;;;;;;;;;ACrBjB,+DAA0B;AAE1B;IAKI,oBAAY,MAA0B,EAAE,KAAiB;QACrD,IAAI,CAAC,SAAS,GAAG,IAAI,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,KAAK,EAAE,MAAM,CAAC,MAAM,CAAC,CAAC;QAC9D,IAAI,CAAC,IAAI,GAAG,IAAI,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,EAAE,MAAM,CAAC,MAAM,CAAC,CAAC;QACvD,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;IACxB,CAAC;IAED,6BAAQ,GAAR;QACI,IAAI,KAAK,GAAG,EAAE,CAAC;QACf,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC,EAAG,EAAE;YACnC,IAAM,IAAI,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;YAC5B,IAAI,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC;YACnB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC,IAAI,CAAC,EAAE;gBACrC,IAAM,KAAK,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC;gBACtB,IAAM,GAAG,GAAG,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;gBACxB,OAAO,CAAC,GAAG,KAAK,EAAE;oBACd,KAAK,IAAI,GAAG,CAAC;oBACb,CAAC,EAAG,CAAC;iBACR;gBACD,OAAO,CAAC,GAAG,GAAG,EAAE;oBACZ,KAAK,IAAI,GAAG,CAAC;oBACb,CAAC,EAAG,CAAC;iBACR;aACJ;YACD,OAAO,CAAC,IAAI,IAAI,CAAC,KAAK,EAAE;gBACpB,KAAK,IAAI,GAAG,CAAC;gBACb,CAAC,EAAG,CAAC;aACR;YACD,KAAK,IAAI,IAAI,CAAC;SACjB;QACD,OAAU,IAAI,CAAC,SAAS,UAAK,KAAO,CAAC;IACzC,CAAC;IAID,sBAAI,8BAAM;QAFV,YAAY;aAEZ;YACI,OAAO,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC;QAC5B,CAAC;;;OAAA;IAED,sBAAI,8BAAM;aAAV;YACI,OAAO,IAAI,CAAC,SAAS,CAAC,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC;QACnD,CAAC;;;OAAA;IAED,sBAAI,6BAAK;aAAT;YACI,OAAO,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC;QAC5B,CAAC;;;OAAA;IAED,sBAAI,6BAAK;aAAT;YACI,OAAO,IAAI,CAAC,SAAS,CAAC,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,KAAK,GAAG,CAAC,CAAC;QAClD,CAAC;;;OAAA;IAED,sBAAI,6BAAK;aAAT;YACI,OAAO,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC;QAC3B,CAAC;;;OAAA;IAED,sBAAI,8BAAM;aAAV;YACI,OAAO,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC;QAC5B,CAAC;;;OAAA;IAED,wBAAG,GAAH,UAAI,CAAS,EAAE,CAAS;QACpB,IAAI,CAAC,GAAG,IAAI,CAAC,MAAM,IAAI,CAAC,GAAG,IAAI,CAAC,MAAM,EAAE;YACpC,OAAO,KAAK,CAAC;SAChB;QACD,IAAM,IAAI,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC;QAC1C,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC,IAAI,CAAC,EAAE;YACrC,IAAI,CAAC,IAAI,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE;gBACjC,OAAO,IAAI,CAAC;aACf;SACJ;QACD,OAAO,KAAK,CAAC;IACjB,CAAC;IAED,4BAAO,GAAP,UAAQ,CAAS,EAAE,QAAgD;QAC/D,IAAI,CAAC,GAAG,IAAI,CAAC,MAAM,IAAI,CAAC,GAAG,IAAI,CAAC,MAAM,EAAE;YACpC,OAAO;SACV;QACD,IAAM,IAAI,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC;QAC1C,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC,IAAI,CAAC,EAAE;YACrC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;SACtC;IACL,CAAC;IACL,iBAAC;AAAD,CAAC;AArFY,gCAAU;;;;;;;;;;;;;;ACFvB,+DAA0B;AAO1B,IAAM,SAAS,GAAG,IAAI,IAAI,CAAC,MAAM,EAAE,CAAC;AAEpC;IAMI,mBAAY,KAAc,EAAE,MAAe,EAAE,KAAc,EAAE,MAAe;QACxE,IAAI,OAAO,KAAK,KAAK,WAAW,EAAE;YAC9B,KAAK,GAAG,CAAC,CAAC;SACb;QACD,IAAI,OAAO,MAAM,KAAK,WAAW,EAAE;YAC/B,MAAM,GAAG,CAAC,CAAC;SACd;QACD,IAAI,OAAO,KAAK,KAAK,WAAW,EAAE;YAC9B,KAAK,GAAG,CAAC,CAAC;SACb;QACD,IAAI,OAAO,MAAM,KAAK,WAAW,EAAE;YAC/B,MAAM,GAAG,CAAC,CAAC;SACd;QACD,IAAI,CAAC,SAAS,GAAG,IAAI,IAAI,CAAC,MAAM,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC;QAChD,IAAI,CAAC,IAAI,GAAG,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC;IAC7C,CAAC;IAED,YAAY;IAEZ,4BAAQ,GAAR;QACI,OAAO,MAAI,IAAI,CAAC,KAAK,SAAI,IAAI,CAAC,MAAM,SAAI,IAAI,CAAC,KAAK,SAAI,IAAI,CAAC,MAAM,MAAG,CAAC;IACzE,CAAC;IAED,0BAAM,GAAN,UAAO,KAAoB;QACvB,OAAO,IAAI,CAAC,KAAK,KAAK,KAAK,CAAC,KAAK,IAAI,IAAI,CAAC,MAAM,KAAK,KAAK,CAAC,MAAM,IAAI,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;IACjG,CAAC;IAED,sBAAI,6BAAM;aAAV;YACI,OAAO,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC;QAC5B,CAAC;;;OAAA;IAED,sBAAI,6BAAM;aAAV;YACI,OAAO,IAAI,CAAC,SAAS,CAAC,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC;QACnD,CAAC;;;OAAA;IAED,sBAAI,4BAAK;aAAT;YACI,OAAO,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC;QAC5B,CAAC;;;OAAA;IAED,sBAAI,4BAAK;aAAT;YACI,OAAO,IAAI,CAAC,SAAS,CAAC,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,KAAK,GAAG,CAAC,CAAC;QAClD,CAAC;;;OAAA;IAED,sBAAI,4BAAK;aAAT;YACI,OAAO,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC;QAC3B,CAAC;;;OAAA;IAED,sBAAI,6BAAM;aAAV;YACI,OAAO,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC;QAC5B,CAAC;;;OAAA;IAED,sBAAI,4BAAK;aAAT;YACI,OAAO,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC;QAC3B,CAAC;;;OAAA;IAED,sBAAI,2BAAI;aAAR;YACI,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC;QAC1B,CAAC;;;OAAA;IAED,WAAW;IAEX,uBAAG,GAAH,UAAI,KAAa,EAAE,MAAc,EAAE,KAAa,EAAE,MAAc;QAC5D,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC;QAClC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC;QAC7B,OAAO,IAAI,CAAC;IAChB,CAAC;IAED,4BAAQ,GAAR,UAAS,KAAoB;QACzB,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,KAAK,CAAC,KAAK,EAAE,KAAK,CAAC,MAAM,CAAC,CAAC;QAC9C,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,KAAK,EAAE,KAAK,CAAC,MAAM,CAAC,CAAC;QACzC,OAAO,IAAI,CAAC;IAChB,CAAC;IAED,mCAAe,GAAf,UAAgB,GAAoB;QAChC,IAAM,EAAE,GAAG,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC;QAC9B,IAAI,EAAE,GAAG,CAAC,EAAE;YACR,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,EAAE,CAAC;YACtB,IAAI,CAAC,SAAS,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC;SAC5B;aAAM,IAAI,EAAE,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE;YAC9B,IAAI,CAAC,IAAI,CAAC,KAAK,GAAG,EAAE,GAAG,CAAC,CAAC;SAC5B;QACD,IAAM,EAAE,GAAG,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC;QACpC,IAAI,EAAE,GAAG,CAAC,EAAE;YACR,IAAI,CAAC,IAAI,CAAC,MAAM,IAAI,EAAE,CAAC;YACvB,IAAI,CAAC,SAAS,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC;SAC5B;aAAM,IAAI,EAAE,IAAI,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE;YAC/B,IAAI,CAAC,IAAI,CAAC,MAAM,GAAG,EAAE,GAAG,CAAC,CAAC;SAC7B;QACD,OAAO,IAAI,CAAC;IAChB,CAAC;IAED,YAAY;IAEZ,kCAAc,GAAd,UAAe,GAAoB;QAC/B,OAAO,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,SAAS,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,cAAc,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC;IAC5F,CAAC;IAED,qCAAiB,GAAjB,UAAkB,KAAoB;QAClC,SAAS,CAAC,GAAG,CAAC,KAAK,CAAC,KAAK,EAAE,KAAK,CAAC,MAAM,CAAC,CAAC,cAAc,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;QACxE,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,SAAS,CAAC,EAAE;YACtC,OAAO,KAAK,CAAC;SAChB;QACD,IAAI,KAAK,CAAC,KAAK,KAAK,CAAC,IAAI,KAAK,CAAC,MAAM,KAAK,CAAC,EAAE;YACzC,OAAO,KAAK,CAAC;SAChB;QACD,OAAO,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,SAAS,CAAC,GAAG,CAAC,KAAK,CAAC,KAAK,GAAG,CAAC,EAAE,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;IACtF,CAAC;IAED,qCAAiB,GAAjB,UAAkB,KAAoB;QAClC,OAAO,IAAI,CAAC,MAAM,IAAI,KAAK,CAAC,MAAM,GAAG,KAAK,CAAC,MAAM,GAAG,CAAC;eAC9C,IAAI,CAAC,MAAM,IAAI,KAAK,CAAC,MAAM;eAC3B,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,KAAK,GAAG,KAAK,CAAC,KAAK,GAAG,CAAC;eAC3C,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,KAAK;eACzB,CAAC,IAAI,CAAC,KAAK;eACX,KAAK,CAAC,KAAK,KAAK,CAAC,IAAI,KAAK,CAAC,MAAM,KAAK,CAAC,CAAC;IACnD,CAAC;IAED,yBAAK,GAAL,UAAM,GAAoB;QACtB,OAAO,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,cAAc,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC;IACnF,CAAC;IACL,gBAAC;AAAD,CAAC;AA9HY,8BAAS;;;;;;;;;;;;;;ACFtB;IAMI,cAAY,KAAc,EAAE,MAAe;QACvC,IAAI,OAAO,KAAK,KAAK,WAAW,EAAE;YAC9B,KAAK,GAAG,CAAC,CAAC;SACb;QACD,IAAI,OAAO,MAAM,KAAK,WAAW,EAAE;YAC/B,MAAM,GAAG,CAAC,CAAC;SACd;QACD,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QACnB,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;IACzB,CAAC;IAED,YAAY;IAEZ,uBAAQ,GAAR;QACI,OAAO,MAAI,IAAI,CAAC,KAAK,SAAI,IAAI,CAAC,MAAM,MAAG,CAAC;IAC5C,CAAC;IAED,qBAAM,GAAN,UAAO,KAAe;QAClB,OAAO,IAAI,CAAC,KAAK,KAAK,KAAK,CAAC,KAAK,IAAI,IAAI,CAAC,MAAM,KAAK,KAAK,CAAC,MAAM,CAAC;IACtE,CAAC;IAED,sBAAI,uBAAK;aAAT;YACI,OAAO,IAAI,CAAC,KAAK,KAAK,CAAC,IAAI,IAAI,CAAC,MAAM,KAAK,CAAC,CAAC;QACjD,CAAC;;;OAAA;IAED,sBAAI,sBAAI;aAAR;YACI,OAAO,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC;QACpC,CAAC;;;OAAA;IAED,WAAW;IAEX,kBAAG,GAAH,UAAI,KAAa,EAAE,MAAc;QAC7B,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QACnB,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;QACrB,OAAO,IAAI,CAAC;IAChB,CAAC;IAED,uBAAQ,GAAR,UAAS,KAAe;QACpB,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC,KAAK,CAAC;QACzB,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC,MAAM,CAAC;QAC3B,OAAO,IAAI,CAAC;IAChB,CAAC;IAED,kBAAG,GAAH,UAAI,KAAa,EAAE,MAAc;QAC7B,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC;QACpB,IAAI,CAAC,MAAM,IAAI,MAAM,CAAC;QACtB,OAAO,IAAI,CAAC;IAChB,CAAC;IAED,wBAAS,GAAT,UAAU,GAAoB;QAC1B,IAAI,CAAC,KAAK,IAAI,GAAG,CAAC,CAAC,CAAC;QACpB,IAAI,CAAC,MAAM,IAAI,GAAG,CAAC,CAAC,CAAC;QACrB,OAAO,IAAI,CAAC;IAChB,CAAC;IAED,uBAAQ,GAAR,UAAS,MAAc;QACnB,IAAI,CAAC,KAAK,IAAI,MAAM,CAAC;QACrB,IAAI,CAAC,MAAM,IAAI,MAAM,CAAC;QACtB,OAAO,IAAI,CAAC;IAChB,CAAC;IAED,eAAe;IAEf,YAAY;IAEZ,6BAAc,GAAd,UAAe,GAAoB;QAC/B,OAAO,GAAG,CAAC,CAAC,IAAI,CAAC,IAAI,GAAG,CAAC,CAAC,IAAI,CAAC,IAAI,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC,KAAK,IAAI,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC;IACjF,CAAC;IAED,oBAAK,GAAL,UAAM,GAAoB;QACtB,OAAO,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC,KAAK,GAAG,GAAG,CAAC,CAAC,CAAC;IACtC,CAAC;IACL,WAAC;AAAD,CAAC;AA9EY,oBAAI;;;;;;;;;;;;ACPjB;;;;;GAKG;;;AAEH,2FAAiD;AAAzC,kIAAgB;AACxB,sEAA2E;AAAnE,2GAAS;AAAE,qHAAc;AAAE,qGAAM;AAAE,iGAAI;AAAE,6GAAU;;;;;;;UCR3D;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;UCrBA;UACA;UACA;UACA","file":"block-fractal-1.0.5.js","sourcesContent":["import * as geom from './geom';\r\n\r\nexport interface BlockFractalParam {\r\n    random?: () => number;\r\n    iterations: number;\r\n    shape?: geom.Path;\r\n    variation?: number;\r\n}\r\n\r\nfunction nextToLastMatch(points: geom.Offset[], next: geom.Offset) {\r\n    return points.length > 1 && points[points.length - 2].equals(next);\r\n}\r\n\r\nfunction addPoint(points: geom.Offset[], mask: geom.MaskRect, next: geom.Offset) {\r\n    if (nextToLastMatch(points, next)) {\r\n        mask.set(points.splice(points.length - 1, 1)[0], false);\r\n    } else {\r\n        points.push(next);\r\n        mask.set(next, true);\r\n    }\r\n}\r\n\r\nfunction verticalHelper(points: geom.Offset[], random: () => number, variation: number,\r\n                        newPoints: geom.Offset[], mask: geom.MaskRect, i: number,\r\n                        p1: geom.Offset, p2: geom.Offset) {\r\n    const x = 2 * p1.x;\r\n    const yDir = p2.y - p1.y;\r\n    for (let y = 2 * p1.y; y !== 2 * p2.y; y += yDir) {\r\n        const np3 = new geom.Offset(x, y + yDir);\r\n        // console.info(`- ${np3}`);\r\n        if (nextToLastMatch(newPoints, np3)) {\r\n            // This can happen around a corner, when just before the corner\r\n            // we dip into the corner\r\n            // console.info(` remove ${newPoints[newPoints.length - 1]}`);\r\n            mask.set(newPoints.splice(newPoints.length - 1, 1)[0], false);\r\n            continue;\r\n        }\r\n        if (i === points.length - 2 && mask.get(np3)) {\r\n            // This can happen if the first point was on a corner and the\r\n            // first move was to dip into the corner\r\n            const index = newPoints.findIndex((point) => point.equals(np3));\r\n            // console.info(`remove ${index} from beginning`);\r\n            for (const point of newPoints.splice(0, index)) {\r\n                mask.set(point, false);\r\n            }\r\n            addPoint(newPoints, mask, np3);\r\n            break;\r\n        }\r\n        if (random() < variation) {\r\n            const v = Math.floor(random() * 2) * 2 - 1;\r\n            const np1 = new geom.Offset(x + v, y);\r\n            const np2 = new geom.Offset(x + v, y + yDir);\r\n            if (!mask.get(np2)) {\r\n                if (!mask.get(np1) || nextToLastMatch(newPoints, np1)) {\r\n                    addPoint(newPoints, mask, np1);\r\n                    addPoint(newPoints, mask, np2);\r\n                }\r\n            }\r\n        }\r\n        addPoint(newPoints, mask, np3);\r\n    }\r\n}\r\n\r\nfunction horizontalHelper(points: geom.Offset[], random: () => number, variation: number,\r\n                          newPoints: geom.Offset[], mask: geom.MaskRect, i: number,\r\n                          p1: geom.Offset, p2: geom.Offset) {\r\n    const y = 2 * p1.y;\r\n    const xDir = p2.x - p1.x;\r\n    for (let x = 2 * p1.x; x !== 2 * p2.x; x += xDir) {\r\n        const np3 = new geom.Offset(x + xDir, y);\r\n        // console.info(`- ${np3}`);\r\n        if (nextToLastMatch(newPoints, np3)) {\r\n            // This can happen around a corner, when just before the corner\r\n            // we dip in the direction of the corner\r\n            // console.info(` remove ${newPoints[newPoints.length - 1]}`);\r\n            mask.set(newPoints.splice(newPoints.length - 1, 1)[0], false);\r\n            continue;\r\n        }\r\n        if (i === points.length - 2 && mask.get(np3)) {\r\n            // This can happen if the first point was on a corner and the\r\n            // first move was to dip into the corner\r\n            const index = newPoints.findIndex((point) => point.equals(np3));\r\n            // console.info(`remove ${index} from beginning`);\r\n            for (const point of newPoints.splice(0, index)) {\r\n                mask.set(point, false);\r\n            }\r\n            addPoint(newPoints, mask, np3);\r\n            break;\r\n        }\r\n        if (random() < variation) {\r\n            const v = Math.floor(random() * 2) * 2 - 1;\r\n            const np1 = new geom.Offset(x, y + v);\r\n            const np2 = new geom.Offset(x + xDir, y + v);\r\n            if (!mask.get(np2)) {\r\n                if (!mask.get(np1) || nextToLastMatch(newPoints, np1)) {\r\n                    addPoint(newPoints, mask, np1);\r\n                    addPoint(newPoints, mask, np2);\r\n                }\r\n            }\r\n        }\r\n        addPoint(newPoints, mask, np3);\r\n    }\r\n}\r\n\r\nfunction blockFractalIteration(random: () => number, points: geom.Offset[],\r\n                               bounds: geom.RectangleLike, variation: number) {\r\n    const newPoints = new Array<geom.Offset>();\r\n    const newBounds = new geom.Rectangle(\r\n        bounds.westX * 2 - 1,\r\n        bounds.northY * 2 - 1,\r\n        bounds.width * 2 + 2,\r\n        bounds.height * 2 + 2,\r\n    );\r\n    // console.info(` bounds ${newBounds}`);\r\n    const mask = new geom.MaskRect(newBounds);\r\n    for (let i = 0; i < points.length - 1; i ++) {\r\n        const p1 = points[i];\r\n        const p2 = points[i + 1];\r\n        if (i === 0) {\r\n            addPoint(newPoints, mask, new geom.Offset(p1.x * 2, p1.y * 2));\r\n        }\r\n        if (p1.x === p2.x) {\r\n            verticalHelper(points, random, variation, newPoints, mask, i, p1, p2);\r\n        } else {\r\n            horizontalHelper(points, random, variation, newPoints, mask, i, p1, p2);\r\n        }\r\n    }\r\n    return {\r\n        points: newPoints,\r\n        bounds: newBounds,\r\n    };\r\n}\r\n\r\nexport function makeBlockFractal(param: BlockFractalParam): geom.Path {\r\n    let {random, shape, variation} = param;\r\n    if (typeof random === 'undefined') {\r\n        random = Math.random;\r\n    }\r\n    if (typeof shape === 'undefined') {\r\n        shape = new geom.Path({x: -1, y: -1}, [\r\n            geom.Direction.EAST,\r\n            geom.Direction.EAST,\r\n            geom.Direction.SOUTH,\r\n            geom.Direction.SOUTH,\r\n            geom.Direction.WEST,\r\n            geom.Direction.WEST,\r\n            geom.Direction.NORTH,\r\n            geom.Direction.NORTH,\r\n        ]);\r\n    }\r\n    if (typeof variation === 'undefined') {\r\n        variation = 0.4;\r\n    }\r\n\r\n    let points = new Array<geom.Offset>();\r\n    let bounds = shape.getBounds();\r\n    shape.getOffsets((off) => {\r\n        points.push(new geom.Offset(off.x, off.y));\r\n    });\r\n\r\n    for (let iter = 0; iter < param.iterations; iter ++) {\r\n        // console.info(`iteration ${iter + 1}`);\r\n        ({points, bounds} = blockFractalIteration(random, points, bounds, variation));\r\n    }\r\n\r\n    const segments = new Array<geom.Direction>();\r\n    for (let i = 0; i < points.length - 1; i ++) {\r\n        const curPoint = points[i];\r\n        const nextPoint = points[i + 1];\r\n        if (nextPoint.y === curPoint.y - 1) {\r\n            segments.push(geom.Direction.NORTH);\r\n        } else if (nextPoint.x === curPoint.x + 1) {\r\n            segments.push(geom.Direction.EAST);\r\n        } else if (nextPoint.y === curPoint.y + 1) {\r\n            segments.push(geom.Direction.SOUTH);\r\n        } else if (nextPoint.x === curPoint.x - 1) {\r\n            segments.push(geom.Direction.WEST);\r\n        }\r\n    }\r\n\r\n    return new geom.Path(points[0], segments);\r\n}\r\n","import * as geom from '.';\r\n\r\n// tslint:disable:no-bitwise\r\n\r\nexport enum DirectionFlags {\r\n    NONE  = 0,\r\n    NORTH = 1,\r\n    EAST  = 2,\r\n    SOUTH = 4,\r\n    WEST  = 8,\r\n    ALL   = 15,\r\n}\r\n\r\nexport function directionFlagsToString(flags: DirectionFlags) {\r\n    let ret = '[';\r\n    if ((flags & DirectionFlags.NORTH) !== 0) {\r\n        ret += 'N';\r\n    }\r\n    if ((flags & DirectionFlags.EAST) !== 0) {\r\n        ret += 'E';\r\n    }\r\n    if ((flags & DirectionFlags.SOUTH) !== 0) {\r\n        ret += 'S';\r\n    }\r\n    if ((flags & DirectionFlags.WEST) !== 0) {\r\n        ret += 'W';\r\n    }\r\n    return ret + ']';\r\n}\r\n\r\n// conversion\r\n\r\nexport function directionFlagsFromDirection(dir: geom.Direction) {\r\n    return (1 << dir) as DirectionFlags;\r\n}\r\n","// tslint:disable:no-bitwise\r\n\r\nexport enum Direction {\r\n    NORTH = 0,\r\n    EAST  = 1,\r\n    SOUTH = 2,\r\n    WEST  = 3,\r\n}\r\n\r\nexport const DIRECTIONS = [\r\n    Direction.NORTH,\r\n    Direction.EAST,\r\n    Direction.SOUTH,\r\n    Direction.WEST,\r\n];\r\n\r\nconst DIRECTIONS_STR = [\r\n    'N',\r\n    'E',\r\n    'S',\r\n    'W',\r\n];\r\n\r\nexport function directionToString(dir: Direction) {\r\n    return DIRECTIONS_STR[dir];\r\n}\r\n\r\nexport function directionOpposite(dir: Direction) {\r\n    return ((dir + 2) & 3) as Direction;\r\n}\r\n","export * from './direction';\r\nexport * from './direction-flags';\r\nexport * from './offset';\r\nexport * from './size';\r\nexport * from './rectangle';\r\nexport * from './mask';\r\nexport * from './mask-rect';\r\nexport * from './raster-mask';\r\nexport * from './path';\r\n","import * as geom from '.';\r\n\r\nconst LOCAL_OFF = new geom.Offset();\r\n\r\nexport class MaskRect implements geom.RectangleLike {\r\n    private readonly _rectangle = new geom.Rectangle();\r\n    private readonly _mask: geom.Mask;\r\n    private readonly _outsideValue: boolean;\r\n\r\n    constructor(rect: geom.RectangleLike, initialValue = false, outsideValue = false) {\r\n        this._rectangle.copyFrom(rect);\r\n        this._mask = new geom.Mask(rect, initialValue);\r\n        this._outsideValue = outsideValue;\r\n    }\r\n\r\n    // accessors\r\n\r\n    toString() {\r\n        return `${this._rectangle.northWest}/${this._outsideValue}\\n${this._mask}`;\r\n    }\r\n\r\n    get westX() {\r\n        return this._rectangle.westX;\r\n    }\r\n\r\n    get northY() {\r\n        return this._rectangle.northY;\r\n    }\r\n\r\n    get width() {\r\n        return this._rectangle.width;\r\n    }\r\n\r\n    get height() {\r\n        return this._rectangle.height;\r\n    }\r\n\r\n    index(off: geom.OffsetLike) {\r\n        return this._mask.index(LOCAL_OFF.copyFrom(off).subtractOffset(this._rectangle.northWest));\r\n    }\r\n\r\n    getAt(index: number) {\r\n        return this._mask.getAt(index);\r\n    }\r\n\r\n    get(off: geom.OffsetLike) {\r\n        if (!this._rectangle.containsOffset(off)) {\r\n            return this._outsideValue;\r\n        }\r\n        return this._mask.getAt(this._rectangle.index(off));\r\n    }\r\n\r\n    // mutators\r\n\r\n    setAt(index: number, value: boolean) {\r\n        this._mask.setAt(index, value);\r\n        return this;\r\n    }\r\n\r\n    set(off: geom.OffsetLike, value: boolean) {\r\n        this._mask.setAt(this._rectangle.index(off), value);\r\n        return this;\r\n    }\r\n}\r\n","import * as geom from '.';\r\n\r\nexport class Mask implements geom.SizeLike {\r\n    private readonly _size = new geom.Size();\r\n    private readonly _bits: number[];\r\n    // TODO consider Uint8Array for bits\r\n\r\n    constructor(size: geom.SizeLike, initialValue = false) {\r\n        this._size.copyFrom(size);\r\n        this._bits = new Array<number>(Math.ceil(this._size.area / 32)).fill(initialValue ? 0xffffffff : 0);\r\n    }\r\n\r\n    // accessors\r\n\r\n    toString() {\r\n        let ret = '';\r\n        const off = new geom.Offset();\r\n        for (let y = 0; y < this._size.height; y ++) {\r\n            for (let x = 0; x < this._size.width; x ++) {\r\n                off.set(x, y);\r\n                ret += this.get(off.set(x, y)) ? '☑' : '☐';\r\n            }\r\n            ret += '\\n';\r\n        }\r\n        return ret;\r\n    }\r\n\r\n    get width() {\r\n        return this._size.width;\r\n    }\r\n\r\n    get height() {\r\n        return this._size.height;\r\n    }\r\n\r\n    index(off: geom.OffsetLike) {\r\n        return this._size.index(off);\r\n    }\r\n\r\n    getAt(index: number) {\r\n        // tslint:disable:no-bitwise\r\n        const arrayIndex = index >>> 5;\r\n        const bitMask = 1 << (index & 31);\r\n        return (this._bits[arrayIndex] & bitMask) !== 0;\r\n        // tslint:enable:no-bitwise\r\n    }\r\n\r\n    get(off: geom.OffsetLike) {\r\n        return this.getAt(this.index(off));\r\n    }\r\n\r\n    // mutators\r\n\r\n    setAt(index: number, value: boolean) {\r\n        // tslint:disable:no-bitwise\r\n        const arrayIndex = index >>> 5;\r\n        const bitMask = 1 << (index & 31);\r\n        if (value) {\r\n            this._bits[arrayIndex] |= bitMask;\r\n        } else {\r\n            this._bits[arrayIndex] &= ~bitMask;\r\n        }\r\n        // tslint:enable:no-bitwise\r\n        return this;\r\n    }\r\n\r\n    set(off: geom.OffsetLike, value: boolean) {\r\n        return this.setAt(this.index(off), value);\r\n    }\r\n}\r\n","import * as geom from '.';\r\n\r\nconst X_FROM_DIRECTION = [  0, 1, 0, -1 ];\r\nconst Y_FROM_DIRECTION = [ -1, 0, 1,  0 ];\r\n\r\nexport interface OffsetLike {\r\n    readonly x: number;\r\n    readonly y: number;\r\n}\r\n\r\nexport class Offset implements OffsetLike {\r\n    x: number;\r\n    y: number;\r\n\r\n    constructor();\r\n    constructor(x: number, y: number);\r\n    constructor(x?: number, y?: number) {\r\n        if (typeof x === 'undefined') {\r\n            x = 0;\r\n        }\r\n        if (typeof y === 'undefined') {\r\n            y = 0;\r\n        }\r\n        this.x = x;\r\n        this.y = y;\r\n    }\r\n\r\n    // accessors\r\n\r\n    toString() {\r\n        return `(${this.x},${this.y})`;\r\n    }\r\n\r\n    equals(other: OffsetLike) {\r\n        return this.x === other.x && this.y === other.y;\r\n    }\r\n\r\n    // chebyshev: can move in any direction (diagonals are ok)\r\n    get magnitudeChebyshev() {\r\n        return Math.max(Math.abs(this.x), Math.abs(this.y));\r\n    }\r\n\r\n    // manhattan: can move only in cardinal directions (no diagonals)\r\n    get magnitudeManhattan(): number {\r\n        return Math.abs(this.x) + Math.abs(this.y);\r\n    }\r\n\r\n    // mutators\r\n\r\n    set(x: number, y: number) {\r\n        this.x = x;\r\n        this.y = y;\r\n        return this;\r\n    }\r\n\r\n    copyFrom(other: OffsetLike) {\r\n        this.x = other.x;\r\n        this.y = other.y;\r\n        return this;\r\n    }\r\n\r\n    setFromDirection(dir: geom.Direction) {\r\n        this.x = X_FROM_DIRECTION[dir];\r\n        this.y = Y_FROM_DIRECTION[dir];\r\n        return this;\r\n    }\r\n\r\n    add(x: number, y: number) {\r\n        this.x += x;\r\n        this.y += y;\r\n        return this;\r\n    }\r\n\r\n    addSize(size: geom.SizeLike) {\r\n        this.x += size.width;\r\n        this.y += size.height;\r\n        return this;\r\n    }\r\n\r\n    addOffset(off: OffsetLike) {\r\n        this.x += off.x;\r\n        this.y += off.y;\r\n        return this;\r\n    }\r\n\r\n    addDirection(dir: geom.Direction) {\r\n        this.x += X_FROM_DIRECTION[dir];\r\n        this.y += Y_FROM_DIRECTION[dir];\r\n        return this;\r\n    }\r\n\r\n    addCardinalDirection(dir: geom.Direction) {\r\n        this.x += X_FROM_DIRECTION[dir];\r\n        this.y += Y_FROM_DIRECTION[dir];\r\n        return this;\r\n    }\r\n\r\n    subtractOffset(off: OffsetLike) {\r\n        this.x -= off.x;\r\n        this.y -= off.y;\r\n        return this;\r\n    }\r\n\r\n    multiply(factor: number) {\r\n        this.x *= factor;\r\n        this.y *= factor;\r\n        return this;\r\n    }\r\n\r\n    // utilities\r\n\r\n    // chebyshev: can move in any direction (diagonals are ok)\r\n    distanceChebyshev(other: OffsetLike) {\r\n        return this.subtractOffset(other).magnitudeChebyshev;\r\n    }\r\n\r\n    // manhattan: can move only in cardinal directions (no diagonals)\r\n    distanceManhattan(other?: OffsetLike): number {\r\n        return this.subtractOffset(other).magnitudeManhattan;\r\n    }\r\n}\r\n","import * as geom from '.';\r\n\r\nconst LOCAL_OFF = new geom.Offset();\r\n\r\nfunction sortedInsert(array: number[], value: number) {\r\n    let low = 0;\r\n    let high = array.length;\r\n\r\n    while (low < high) {\r\n        // tslint:disable-next-line:no-bitwise\r\n        const mid = (low + high) >>> 1;\r\n        if (array[mid] < value) {\r\n            low = mid + 1;\r\n        } else {\r\n            high = mid;\r\n        }\r\n    }\r\n\r\n    array.splice(low, 0, value);\r\n}\r\n\r\nexport class Path {\r\n    start: geom.Offset;\r\n    segments: geom.Direction[];\r\n\r\n    constructor();\r\n    constructor(start: geom.OffsetLike, segments: geom.Direction[]);\r\n    constructor(start?: geom.OffsetLike, segments?: geom.Direction[]) {\r\n        this.start = new geom.Offset();\r\n        if (typeof start !== 'undefined') {\r\n            this.start.copyFrom(start);\r\n        }\r\n        if (typeof segments === 'undefined') {\r\n            segments = new Array<geom.Direction>();\r\n        }\r\n        this.segments = segments;\r\n    }\r\n\r\n    toString() {\r\n        return `${this.start.toString()}:`\r\n            + `${this.segments.map((segment) => geom.directionToString(segment)).join('')}`;\r\n    }\r\n\r\n    getIsClosed() {\r\n        LOCAL_OFF.copyFrom(this.start);\r\n        for (const segment of this.segments) {\r\n            LOCAL_OFF.addDirection(segment);\r\n        }\r\n        return this.start.equals(LOCAL_OFF);\r\n    }\r\n\r\n    getOffsets(callback: (off: geom.OffsetLike) => void) {\r\n        const cursor = new geom.Offset();\r\n        cursor.copyFrom(this.start);\r\n        callback(cursor);\r\n        for (const segment of this.segments) {\r\n            cursor.addDirection(segment);\r\n            callback(cursor);\r\n        }\r\n    }\r\n\r\n    getBounds(): geom.Rectangle {\r\n        let northY = this.start.y;\r\n        let southY = northY;\r\n        let westX = this.start.x;\r\n        let eastX = westX;\r\n        LOCAL_OFF.copyFrom(this.start);\r\n        for (const segment of this.segments) {\r\n            LOCAL_OFF.addDirection(segment);\r\n            switch (segment) {\r\n            case geom.Direction.NORTH:\r\n                northY = Math.min(northY, LOCAL_OFF.y);\r\n                break;\r\n            case geom.Direction.EAST:\r\n                eastX = Math.max(eastX, LOCAL_OFF.x);\r\n                break;\r\n            case geom.Direction.SOUTH:\r\n                southY = Math.max(southY, LOCAL_OFF.y);\r\n                break;\r\n            case geom.Direction.WEST:\r\n                westX = Math.min(westX, LOCAL_OFF.x);\r\n                break;\r\n            }\r\n        }\r\n        return new geom.Rectangle(westX, northY, eastX - westX + 1, southY - northY + 1);\r\n    }\r\n\r\n    getArea() {\r\n        let total = 0;\r\n        LOCAL_OFF.copyFrom(this.start);\r\n        for (const segment of this.segments) {\r\n            LOCAL_OFF.addDirection(segment);\r\n            switch (segment) {\r\n            case geom.Direction.NORTH:\r\n                total -= LOCAL_OFF.x;\r\n                break;\r\n            case geom.Direction.SOUTH:\r\n                total += LOCAL_OFF.x;\r\n                break;\r\n            }\r\n        }\r\n        return Math.abs(total);\r\n    }\r\n\r\n    rasterize(bounds?: geom.RectangleLike): geom.RasterMask {\r\n        const lines = new Array<number[]>();\r\n        if (typeof bounds === 'undefined') {\r\n            bounds = this.getBounds();\r\n        }\r\n        LOCAL_OFF.copyFrom(this.start);\r\n        const {northY} = bounds;\r\n        const southY = northY + bounds.height - 1;\r\n        for (let y = northY; y < southY; y ++) {\r\n            lines.push([]);\r\n        }\r\n        LOCAL_OFF.copyFrom(this.start);\r\n        for (const segment of this.segments) {\r\n            if (segment === geom.Direction.SOUTH) {\r\n                sortedInsert(lines[LOCAL_OFF.y - northY], LOCAL_OFF.x);\r\n            }\r\n            LOCAL_OFF.addDirection(segment);\r\n            if (segment === geom.Direction.NORTH) {\r\n                sortedInsert(lines[LOCAL_OFF.y - northY], LOCAL_OFF.x);\r\n            }\r\n        }\r\n        return new geom.RasterMask({\r\n            westX: bounds.westX,\r\n            northY: bounds.northY,\r\n            width: bounds.width - 1,\r\n            height: bounds.height - 1,\r\n        }, lines);\r\n    }\r\n}\r\n","import * as geom from '.';\r\n\r\nexport class RasterMask implements geom.RectangleLike, geom.SizeLike {\r\n    northWest: geom.Offset;\r\n    size: geom.Size;\r\n    private _lines: number[][];\r\n\r\n    constructor(bounds: geom.RectangleLike, lines: number[][]) {\r\n        this.northWest = new geom.Offset(bounds.westX, bounds.northY);\r\n        this.size = new geom.Size(bounds.width, bounds.height);\r\n        this._lines = lines;\r\n    }\r\n\r\n    toString() {\r\n        let shape = '';\r\n        for (let y = 0; y < this.height; y ++) {\r\n            const line = this._lines[y];\r\n            let x = this.westX;\r\n            for (let i = 0; i < line.length; i += 2) {\r\n                const start = line[i];\r\n                const end = line[i + 1];\r\n                while (x < start) {\r\n                    shape += '∙';\r\n                    x ++;\r\n                }\r\n                while (x < end) {\r\n                    shape += '█';\r\n                    x ++;\r\n                }\r\n            }\r\n            while (x <= this.eastX) {\r\n                shape += '∙';\r\n                x ++;\r\n            }\r\n            shape += '\\n';\r\n        }\r\n        return `${this.northWest}\\n${shape}`;\r\n    }\r\n\r\n    // accessors\r\n\r\n    get northY() {\r\n        return this.northWest.y;\r\n    }\r\n\r\n    get southY() {\r\n        return this.northWest.y + this.size.height - 1;\r\n    }\r\n\r\n    get westX() {\r\n        return this.northWest.x;\r\n    }\r\n\r\n    get eastX() {\r\n        return this.northWest.x + this.size.width - 1;\r\n    }\r\n\r\n    get width() {\r\n        return this.size.width;\r\n    }\r\n\r\n    get height() {\r\n        return this.size.height;\r\n    }\r\n\r\n    get(x: number, y: number) {\r\n        if (y < this.northY || y > this.southY) {\r\n            return false;\r\n        }\r\n        const line = this._lines[y - this.northY];\r\n        for (let i = 0; i < line.length; i += 2) {\r\n            if (x >= line[i] && x < line[i + 1]) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    bandsAt(y: number, callback: (westX: number, eastX: number) => void) {\r\n        if (y < this.northY || y > this.southY) {\r\n            return;\r\n        }\r\n        const line = this._lines[y - this.northY];\r\n        for (let i = 0; i < line.length; i += 2) {\r\n            callback(line[i], line[i + 1] - 1);\r\n        }\r\n    }\r\n}\r\n","import * as geom from '.';\r\n\r\nexport interface RectangleLike extends geom.SizeLike {\r\n    readonly westX: number;\r\n    readonly northY: number;\r\n}\r\n\r\nconst LOCAL_OFF = new geom.Offset();\r\n\r\nexport class Rectangle implements RectangleLike, geom.SizeLike {\r\n    northWest: geom.Offset;\r\n    size: geom.Size;\r\n\r\n    constructor();\r\n    constructor(westX: number, northY: number, width: number, height: number);\r\n    constructor(westX?: number, northY?: number, width?: number, height?: number) {\r\n        if (typeof westX === 'undefined') {\r\n            westX = 0;\r\n        }\r\n        if (typeof northY === 'undefined') {\r\n            northY = 0;\r\n        }\r\n        if (typeof width === 'undefined') {\r\n            width = 0;\r\n        }\r\n        if (typeof height === 'undefined') {\r\n            height = 0;\r\n        }\r\n        this.northWest = new geom.Offset(westX, northY);\r\n        this.size = new geom.Size(width, height);\r\n    }\r\n\r\n    // accessors\r\n\r\n    toString() {\r\n        return `(${this.westX},${this.northY} ${this.width}x${this.height})`;\r\n    }\r\n\r\n    equals(other: RectangleLike) {\r\n        return this.westX === other.westX && this.northY === other.northY && this.size.equals(other);\r\n    }\r\n\r\n    get northY() {\r\n        return this.northWest.y;\r\n    }\r\n\r\n    get southY() {\r\n        return this.northWest.y + this.size.height - 1;\r\n    }\r\n\r\n    get westX() {\r\n        return this.northWest.x;\r\n    }\r\n\r\n    get eastX() {\r\n        return this.northWest.x + this.size.width - 1;\r\n    }\r\n\r\n    get width() {\r\n        return this.size.width;\r\n    }\r\n\r\n    get height() {\r\n        return this.size.height;\r\n    }\r\n\r\n    get empty() {\r\n        return this.size.empty;\r\n    }\r\n\r\n    get area() {\r\n        return this.size.area;\r\n    }\r\n\r\n    // mutators\r\n\r\n    set(westX: number, northY: number, width: number, height: number) {\r\n        this.northWest.set(westX, northY);\r\n        this.size.set(width, height);\r\n        return this;\r\n    }\r\n\r\n    copyFrom(other: RectangleLike) {\r\n        this.northWest.set(other.westX, other.northY);\r\n        this.size.set(other.width, other.height);\r\n        return this;\r\n    }\r\n\r\n    extendToInclude(off: geom.OffsetLike) {\r\n        const dx = off.x - this.westX;\r\n        if (dx < 0) {\r\n            this.size.width -= dx;\r\n            this.northWest.x = off.x;\r\n        } else if (dx >= this.size.width) {\r\n            this.size.width = dx + 1;\r\n        }\r\n        const dy = off.y - this.northWest.y;\r\n        if (dy < 0) {\r\n            this.size.height -= dy;\r\n            this.northWest.y = off.y;\r\n        } else if (dy >= this.size.height) {\r\n            this.size.height = dy + 1;\r\n        }\r\n        return this;\r\n    }\r\n\r\n    // utilities\r\n\r\n    containsOffset(off: geom.OffsetLike) {\r\n        return this.size.containsOffset(LOCAL_OFF.copyFrom(off).subtractOffset(this.northWest));\r\n    }\r\n\r\n    containsRectangle(other: RectangleLike) {\r\n        LOCAL_OFF.set(other.westX, other.northY).subtractOffset(this.northWest);\r\n        if (!this.size.containsOffset(LOCAL_OFF)) {\r\n            return false;\r\n        }\r\n        if (other.width === 0 && other.height === 0) {\r\n            return false;\r\n        }\r\n        return this.size.containsOffset(LOCAL_OFF.add(other.width - 1, other.height - 1));\r\n    }\r\n\r\n    overlapsRectangle(other: RectangleLike) {\r\n        return this.northY <= other.northY + other.height - 1\r\n            && this.southY >= other.northY\r\n            && this.westX <= other.westX + other.width - 1\r\n            && this.eastX >= other.westX\r\n            && !this.empty\r\n            && other.width !== 0 && other.height !== 0;\r\n    }\r\n\r\n    index(off: geom.OffsetLike) {\r\n        return this.size.index(LOCAL_OFF.copyFrom(off).subtractOffset(this.northWest));\r\n    }\r\n}\r\n","import * as geom from '.';\r\n\r\nexport interface SizeLike {\r\n    readonly width: number;\r\n    readonly height: number;\r\n}\r\n\r\nexport class Size implements SizeLike {\r\n    width: number;\r\n    height: number;\r\n\r\n    constructor();\r\n    constructor(width: number, height: number);\r\n    constructor(width?: number, height?: number) {\r\n        if (typeof width === 'undefined') {\r\n            width = 0;\r\n        }\r\n        if (typeof height === 'undefined') {\r\n            height = 0;\r\n        }\r\n        this.width = width;\r\n        this.height = height;\r\n    }\r\n\r\n    // accessors\r\n\r\n    toString() {\r\n        return `(${this.width}x${this.height})`;\r\n    }\r\n\r\n    equals(other: SizeLike) {\r\n        return this.width === other.width && this.height === other.height;\r\n    }\r\n\r\n    get empty() {\r\n        return this.width === 0 || this.height === 0;\r\n    }\r\n\r\n    get area() {\r\n        return this.width * this.height;\r\n    }\r\n\r\n    // mutators\r\n\r\n    set(width: number, height: number) {\r\n        this.width = width;\r\n        this.height = height;\r\n        return this;\r\n    }\r\n\r\n    copyFrom(other: SizeLike) {\r\n        this.width = other.width;\r\n        this.height = other.height;\r\n        return this;\r\n    }\r\n\r\n    add(width: number, height: number) {\r\n        this.width += width;\r\n        this.height += height;\r\n        return this;\r\n    }\r\n\r\n    addOffset(off: geom.OffsetLike) {\r\n        this.width += off.x;\r\n        this.height += off.y;\r\n        return this;\r\n    }\r\n\r\n    multiply(factor: number) {\r\n        this.width *= factor;\r\n        this.height *= factor;\r\n        return this;\r\n    }\r\n\r\n    // TODO: rotate\r\n\r\n    // utilities\r\n\r\n    containsOffset(off: geom.OffsetLike) {\r\n        return off.x >= 0 && off.y >= 0 && off.x < this.width && off.y < this.height;\r\n    }\r\n\r\n    index(off: geom.OffsetLike) {\r\n        return off.y * this.width + off.x;\r\n    }\r\n}\r\n","/*\r\n *  BlockFractal\r\n *  github.com/sbj42/block-fractal\r\n *  James Clark\r\n *  Licensed under the MIT license.\r\n */\r\n\r\nexport {makeBlockFractal} from './block-fractal';\r\nexport {Direction, DirectionFlags, Offset, Path, RasterMask} from './geom';\r\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tif(__webpack_module_cache__[moduleId]) {\n\t\treturn __webpack_module_cache__[moduleId].exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// module exports must be returned from runtime so entry inlining is disabled\n// startup\n// Load entry module and return exports\nreturn __webpack_require__(\"./src/index.ts\");\n"],"sourceRoot":""}